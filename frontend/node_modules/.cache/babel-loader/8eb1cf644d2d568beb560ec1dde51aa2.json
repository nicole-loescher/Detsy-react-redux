{"ast":null,"code":"import Cookies from 'js-cookie';\nexport async function fetch(url, options = {}) {\n  options.method = options.method || 'GET';\n  options.headers = options.headers || {};\n\n  if (options.method.toUpperCase() !== 'GET') {\n    options.headers['Content-Type'] = options.headers['Content-Type'] || 'application/json';\n    options.headers['XSRF-Token'] = Cookies.get('XSRF-TOKEN');\n  }\n\n  const res = await window.fetch(url, options);\n  const contentType = res.headers.get('content-type');\n\n  if (contentType && contentType.includes('application/json')) {\n    const data = await res.json();\n    res.data = data;\n  }\n\n  if (res.status >= 400) throw res;\n  return res;\n}\nexport function restoreCSRF() {\n  return fetch('/api/csrf/restore');\n}","map":{"version":3,"sources":["/Users/nicolelolo/Desktop/authenticate-me/frontend/src/store/csrf.js"],"names":["Cookies","fetch","url","options","method","headers","toUpperCase","get","res","window","contentType","includes","data","json","status","restoreCSRF"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AAEA,OAAO,eAAeC,KAAf,CAAqBC,GAArB,EAA0BC,OAAO,GAAG,EAApC,EAAwC;AAC3CA,EAAAA,OAAO,CAACC,MAAR,GAAiBD,OAAO,CAACC,MAAR,IAAkB,KAAnC;AACAD,EAAAA,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACE,OAAR,IAAmB,EAArC;;AAEA,MAAIF,OAAO,CAACC,MAAR,CAAeE,WAAf,OAAiC,KAArC,EAA4C;AACxCH,IAAAA,OAAO,CAACE,OAAR,CAAgB,cAAhB,IACIF,OAAO,CAACE,OAAR,CAAgB,cAAhB,KAAmC,kBADvC;AAEAF,IAAAA,OAAO,CAACE,OAAR,CAAgB,YAAhB,IAAgCL,OAAO,CAACO,GAAR,CAAY,YAAZ,CAAhC;AACH;;AAED,QAAMC,GAAG,GAAG,MAAMC,MAAM,CAACR,KAAP,CAAaC,GAAb,EAAkBC,OAAlB,CAAlB;AACA,QAAMO,WAAW,GAAGF,GAAG,CAACH,OAAJ,CAAYE,GAAZ,CAAgB,cAAhB,CAApB;;AAEA,MAAIG,WAAW,IAAIA,WAAW,CAACC,QAAZ,CAAqB,kBAArB,CAAnB,EAA6D;AACzD,UAAMC,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAAnB;AACAL,IAAAA,GAAG,CAACI,IAAJ,GAAWA,IAAX;AACH;;AAED,MAAIJ,GAAG,CAACM,MAAJ,IAAc,GAAlB,EAAuB,MAAMN,GAAN;AAEvB,SAAOA,GAAP;AACH;AACD,OAAO,SAASO,WAAT,GAAuB;AAC1B,SAAOd,KAAK,CAAC,mBAAD,CAAZ;AACH","sourcesContent":["import Cookies from 'js-cookie';\n\nexport async function fetch(url, options = {}) {\n    options.method = options.method || 'GET';\n    options.headers = options.headers || {};\n\n    if (options.method.toUpperCase() !== 'GET') {\n        options.headers['Content-Type'] =\n            options.headers['Content-Type'] || 'application/json';\n        options.headers['XSRF-Token'] = Cookies.get('XSRF-TOKEN');\n    }\n\n    const res = await window.fetch(url, options);\n    const contentType = res.headers.get('content-type');\n\n    if (contentType && contentType.includes('application/json')) {\n        const data = await res.json();\n        res.data = data;\n    }\n\n    if (res.status >= 400) throw res;\n\n    return res;\n}\nexport function restoreCSRF() {\n    return fetch('/api/csrf/restore');\n}\n"]},"metadata":{},"sourceType":"module"}